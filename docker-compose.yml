services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: pass
      TZ: Europe/Warsaw
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: ["redis-server","--save","","--appendonly","no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - media:/var/app/media
    ports:
      - "8000:8000"
    command: bash -lc "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    restart: unless-stopped

  worker:
    build: .
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - media:/var/app/media
    command: celery -A content_manager worker -l info -c 2
    environment:
      CELERY_WORKER_PREFETCH_MULTIPLIER: "1"
    restart: unless-stopped

  beat:
    build: .
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - media:/var/app/media
      - celerybeat:/var/run/celery
    command: celery -A content_manager beat -l info -s /var/run/celery/celerybeat-schedule
    restart: unless-stopped

volumes:
  pgdata:
  media:
  celerybeat: